#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiManager.h>      // Th√™m th∆∞ vi·ªán WiFiManager
#include <Preferences.h>     // Th√™m th∆∞ vi·ªán Preferences ƒë·ªÉ l∆∞u c·∫•u h√¨nh
#include "esp_camera.h"      // Th∆∞ vi·ªán Camera

// ============== C·∫§U H√åNH CAMERA (AI THINKER) ================
// ƒê·∫£m b·∫£o b·∫°n ƒë√£ ch·ªçn ƒë√∫ng board "AI Thinker ESP32-CAM" trong Arduino IDE
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1 // -1 n·∫øu kh√¥ng d√πng ch√¢n reset
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26 // SDA
#define SIOC_GPIO_NUM     27 // SCL

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
// ============================================================

// ============== C·∫§U H√åNH L∆ØU TR·ªÆ & M·∫∂C ƒê·ªäNH ===============
Preferences preferences;         // ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u/ƒë·ªçc c·∫•u h√¨nh
const char* CONFIG_NAMESPACE = "app-config"; // T√™n namespace trong Preferences
const char* FREQ_KEY = "sendFreq"; // Key ƒë·ªÉ l∆∞u t·∫ßn su·∫•t g·ª≠i (gi√¢y)

// Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ c·∫•u h√¨nh
const char* DEFAULT_FREQUENCY_SECONDS = "60"; // M·∫∑c ƒë·ªãnh g·ª≠i m·ªói 60 gi√¢y
unsigned long sendIntervalMillis = 60000; // Bi·∫øn l∆∞u t·∫ßn su·∫•t g·ª≠i th·ª±c t·∫ø (ms)
// ============================================================

// ============== C·∫§U H√åNH SERVER (C√≥ th·ªÉ c·∫•u h√¨nh qua Portal sau) ================
// B·∫°n n√™n xem x√©t vi·ªác ƒë∆∞a c√°c th√¥ng tin n√†y v√†o c·∫•u h√¨nh qua WiFiManager lu√¥n
const char* server = "192.168.136.127"; // IP m√°y ch·∫°y server Node.js
const int port = 3000;                  // Port c·ªßa server
const char* uploadPath = "/upload";         // Endpoint nh·∫≠n ·∫£nh
const char* boundary = "----ESP32CamBoundary"; // Boundary cho multipart form data
// ============================================================

// ============== BI·∫æN TO√ÄN C·ª§C CHO WIFI MANAGER ===============
WiFiManager wm;                          // ƒê·ªëi t∆∞·ª£ng WiFiManager
bool shouldSaveConfig = false;           // C·ªù b√°o hi·ªáu c·∫ßn l∆∞u c·∫•u h√¨nh m·ªõi
char customFrequency[6];                 // Buffer l∆∞u gi√° tr·ªã t·∫ßn su·∫•t nh·∫≠p t·ª´ portal (VD: "120")
// ============================================================

// Khai b√°o tr∆∞·ªõc c√°c h√†m (forward declarations)
void saveConfigCallback();
void captureAndSend();
bool initCamera();
bool loadConfig();
void saveConfig();

// ========================== SETUP ===========================
void setup() {
    Serial.begin(115200);
    Serial.println("\n\nKh·ªüi ƒë·ªông ESP32-CAM - D·ª± ƒëo√°n s√¢u b·ªánh");

    // --- 1. T·∫£i c·∫•u h√¨nh ƒë√£ l∆∞u ---
    if (!loadConfig()) {
        Serial.println("Kh√¥ng t·∫£i ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.");
        sendIntervalMillis = atoi(DEFAULT_FREQUENCY_SECONDS) * 1000;
        strncpy(customFrequency, DEFAULT_FREQUENCY_SECONDS, sizeof(customFrequency) - 1);
        customFrequency[sizeof(customFrequency) - 1] = '\0'; // ƒê·∫£m b·∫£o null-terminated
    } else {
        Serial.printf("ƒê√£ t·∫£i c·∫•u h√¨nh: T·∫ßn su·∫•t g·ª≠i = %lu ms\n", sendIntervalMillis);
        // C·∫≠p nh·∫≠t buffer customFrequency ƒë·ªÉ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i trong portal
        snprintf(customFrequency, sizeof(customFrequency), "%lu", sendIntervalMillis / 1000);
    }

    // --- 2. C·∫•u h√¨nh WiFi Manager ---
    // ƒê·∫∑t callback s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng nh·∫•n Save trong portal
    wm.setSaveConfigCallback(saveConfigCallback);

    // Th√™m tr∆∞·ªùng nh·∫≠p li·ªáu t√πy ch·ªânh cho t·∫ßn su·∫•t g·ª≠i (gi√¢y)
    WiFiManagerParameter custom_frequency_param("frequency", "G·ª≠i m·ªói (gi√¢y)", customFrequency, 5); // id, label, default value, length
    wm.addParameter(&custom_frequency_param);

    // T√πy ch·ªânh giao di·ªán portal (t√πy ch·ªçn)
    wm.setClass("invert"); // Giao di·ªán t·ªëi
    wm.setConfigPortalTimeout(180); // Th·ªùi gian ch·ªù portal (gi√¢y), sau ƒë√≥ s·∫Ω ti·∫øp t·ª•c ho·∫∑c kh·ªüi ƒë·ªông l·∫°i

    // --- 3. K·∫øt n·ªëi WiFi ho·∫∑c M·ªü Portal C·∫•u h√¨nh ---
    Serial.println("ƒêang k·∫øt n·ªëi WiFi...");
    // Th·ª≠ k·∫øt n·ªëi v√†o m·∫°ng WiFi ƒë√£ l∆∞u. N·∫øu th·∫•t b·∫°i, m·ªü Access Point t√™n "ESP32-CAM-Config"
    if (!wm.autoConnect("ESP32-CAM-Config")) { // T√™n Access Point n·∫øu c·∫ßn c·∫•u h√¨nh
        Serial.println("K·∫øt n·ªëi th·∫•t b·∫°i v√† h·∫øt th·ªùi gian ch·ªù portal. Kh·ªüi ƒë·ªông l·∫°i...");
        delay(3000);
        ESP.restart(); // Kh·ªüi ƒë·ªông l·∫°i n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
    } else {
        // K·∫øt n·ªëi th√†nh c√¥ng!
        Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
        Serial.print("   ƒê·ªãa ch·ªâ IP: ");
        Serial.println(WiFi.localIP());

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ nh·∫•n Save trong portal kh√¥ng
        if (shouldSaveConfig) {
            // L·∫•y gi√° tr·ªã t·∫ßn su·∫•t m·ªõi t·ª´ parameter object
            strcpy(customFrequency, custom_frequency_param.getValue());
            Serial.printf("   T·∫ßn su·∫•t m·ªõi t·ª´ portal: %s gi√¢y\n", customFrequency);

            // Chuy·ªÉn ƒë·ªïi v√† ki·ªÉm tra gi√° tr·ªã
            unsigned long newIntervalSeconds = atol(customFrequency);
            if (newIntervalSeconds > 0 && newIntervalSeconds < (0xFFFFFFFF / 1000)) { // Ki·ªÉm tra h·ª£p l·ªá
                 sendIntervalMillis = newIntervalSeconds * 1000;
                 saveConfig(); // L∆∞u gi√° tr·ªã m·ªõi v√†o Preferences
            } else {
                Serial.println("   T·∫ßn su·∫•t nh·∫≠p kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n gi√° tr·ªã c≈©.");
            }
            shouldSaveConfig = false; // Reset c·ªù
        }
    }

    // --- 4. Kh·ªüi t·∫°o Camera ---
    // N√™n kh·ªüi t·∫°o camera SAU KHI ƒë√£ k·∫øt n·ªëi WiFi ƒë·ªÉ tr√°nh xung ƒë·ªôt t√†i nguy√™n n·∫øu c√≥
    if (!initCamera()) {
        Serial.println("‚ùå Kh·ªüi t·∫°o Camera th·∫•t b·∫°i! Kh·ªüi ƒë·ªông l·∫°i...");
        delay(5000);
        ESP.restart();
    }
    Serial.println("üì∑ Camera ƒë√£ s·∫µn s√†ng.");
}
// ======================== END SETUP =========================


// =========================== LOOP ===========================
void loop() {
    // Ki·ªÉm tra k·∫øt n·ªëi WiFi tr∆∞·ªõc khi l√†m vi·ªác
    if (WiFi.status() == WL_CONNECTED) {
        Serial.printf("Chu·∫©n b·ªã ch·ª•p v√† g·ª≠i ·∫£nh... (L·∫ßn ti·∫øp theo sau %lu gi√¢y)\n", sendIntervalMillis / 1000);
        captureAndSend(); // G·ªçi h√†m ch·ª•p v√† g·ª≠i ·∫£nh
    } else {
        Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi WiFi! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...");
        // WiFiManager th∆∞·ªùng t·ª± ƒë·ªông x·ª≠ l√Ω k·∫øt n·ªëi l·∫°i trong n·ªÅn.
        // N·∫øu mu·ªën √©p k·∫øt n·ªëi l·∫°i ngay l·∫≠p t·ª©c (c√≥ th·ªÉ b·ªã block):
        // wm.autoConnect("ESP32-CAM-Config");
        delay(5000); // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
    }

    // Ch·ªù kho·∫£ng th·ªùi gian ƒë√£ c·∫•u h√¨nh tr∆∞·ªõc khi l·∫∑p l·∫°i
    Serial.printf("Ch·ªù %lu ms...\n", sendIntervalMillis);
    delay(sendIntervalMillis);
}
// ========================= END LOOP =========================


// ==================== C√ÅC H√ÄM PH·ª§ TR·ª¢ =====================

/**
 * @brief Callback ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng nh·∫•n n√∫t Save trong WiFiManager portal.
 * Ch·ªâ ƒë·∫∑t c·ªù `shouldSaveConfig` th√†nh true. Vi·ªác ƒë·ªçc v√† l∆∞u gi√° tr·ªã
 * s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán trong setup() sau khi k·∫øt n·ªëi th√†nh c√¥ng.
 */
void saveConfigCallback() {
    Serial.println("WiFiManager: Y√™u c·∫ßu l∆∞u c·∫•u h√¨nh.");
    shouldSaveConfig = true;
}

/**
 * @brief T·∫£i c·∫•u h√¨nh (t·∫ßn su·∫•t g·ª≠i) t·ª´ b·ªô nh·ªõ Preferences.
 * @return true n·∫øu t·∫£i th√†nh c√¥ng, false n·∫øu c√≥ l·ªói ho·∫∑c ch∆∞a c√≥ c·∫•u h√¨nh.
 */
bool loadConfig() {
    if (!preferences.begin(CONFIG_NAMESPACE, true)) { // M·ªü namespace ·ªü ch·∫ø ƒë·ªô ch·ªâ ƒë·ªçc (true)
         Serial.println("L·ªói m·ªü Preferences ƒë·ªÉ ƒë·ªçc.");
         return false;
    }
    // ƒê·ªçc gi√° tr·ªã t·∫ßn su·∫•t. N·∫øu key kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ 0.
    unsigned long loadedIntervalSec = preferences.getULong(FREQ_KEY, 0);
    preferences.end(); // ƒê√≥ng Preferences

    if (loadedIntervalSec > 0) { // N·∫øu ƒë·ªçc ƒë∆∞·ª£c gi√° tr·ªã h·ª£p l·ªá
        sendIntervalMillis = loadedIntervalSec * 1000;
        return true;
    } else {
        // N·∫øu gi√° tr·ªã = 0 (ho·∫∑c key kh√¥ng t·ªìn t·∫°i), d√πng m·∫∑c ƒë·ªãnh
        Serial.println("Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh t·∫ßn su·∫•t, s·∫Ω d√πng m·∫∑c ƒë·ªãnh.");
        return false;
    }
}

/**
 * @brief L∆∞u c·∫•u h√¨nh hi·ªán t·∫°i (t·∫ßn su·∫•t g·ª≠i) v√†o b·ªô nh·ªõ Preferences.
 */
void saveConfig() {
     if (!preferences.begin(CONFIG_NAMESPACE, false)) { // M·ªü namespace ·ªü ch·∫ø ƒë·ªô ƒë·ªçc/ghi (false)
         Serial.println("L·ªói m·ªü Preferences ƒë·ªÉ ghi.");
         return;
     }
     // L∆∞u t·∫ßn su·∫•t (t√≠nh b·∫±ng gi√¢y)
     preferences.putULong(FREQ_KEY, sendIntervalMillis / 1000);
     preferences.end(); // ƒê√≥ng Preferences
     Serial.printf("ƒê√£ l∆∞u c·∫•u h√¨nh: T·∫ßn su·∫•t g·ª≠i = %lu gi√¢y\n", sendIntervalMillis / 1000);
}

/**
 * @brief Kh·ªüi t·∫°o camera v·ªõi c·∫•u h√¨nh ƒë√£ ƒë·ªãnh nghƒ©a.
 * @return true n·∫øu kh·ªüi t·∫°o th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i.
 */
bool initCamera() {
    camera_config_t config;
    config.ledc_channel = LEDC_CHANNEL_0;
    config.ledc_timer = LEDC_TIMER_0;
    config.pin_d0 = Y2_GPIO_NUM;
    config.pin_d1 = Y3_GPIO_NUM;
    config.pin_d2 = Y4_GPIO_NUM;
    config.pin_d3 = Y5_GPIO_NUM;
    config.pin_d4 = Y6_GPIO_NUM;
    config.pin_d5 = Y7_GPIO_NUM;
    config.pin_d6 = Y8_GPIO_NUM;
    config.pin_d7 = Y9_GPIO_NUM;
    config.pin_xclk = XCLK_GPIO_NUM;
    config.pin_pclk = PCLK_GPIO_NUM;
    config.pin_vsync = VSYNC_GPIO_NUM;
    config.pin_href = HREF_GPIO_NUM;
    config.pin_sccb_sda = SIOD_GPIO_NUM; // SCCB SDA = I2C SDA
    config.pin_sccb_scl = SIOC_GPIO_NUM; // SCCB SCL = I2C SCL
    config.pin_pwdn = PWDN_GPIO_NUM;
    config.pin_reset = RESET_GPIO_NUM;
    config.xclk_freq_hz = 20000000;      // T·∫ßn s·ªë XCLK 20MHz
    config.pixel_format = PIXFORMAT_JPEG; // ƒê·ªãnh d·∫°ng ·∫£nh JPEG (ƒë√£ n√©n)

    // Ch·ªçn k√≠ch th∆∞·ªõc ·∫£nh nh·ªè h∆°n ƒë·ªÉ ti·∫øt ki·ªám bƒÉng th√¥ng
    // FRAMESIZE_QVGA: 320x240
    // FRAMESIZE_CIF:  400x296
    // FRAMESIZE_VGA:  640x480
    // FRAMESIZE_SVGA: 800x600
    // FRAMESIZE_XGA: 1024x768
    // FRAMESIZE_SXGA: 1280x1024
    // FRAMESIZE_UXGA: 1600x1200
    config.frame_size = FRAMESIZE_QVGA;  // <-- THAY ƒê·ªîI K√çCH TH∆Ø·ªöC ·ªû ƒê√ÇY

    config.jpeg_quality = 12; // Ch·∫•t l∆∞·ª£ng JPEG (0-63), s·ªë nh·ªè h∆°n = ch·∫•t l∆∞·ª£ng cao h∆°n (file l·ªõn h∆°n)
    config.fb_count = 1;      // Ch·ªâ d√πng 1 frame buffer khi ch·ª•p ·∫£nh tƒ©nh
    // N·∫øu g·∫∑p l·ªói Brownout (s·ª•t √°p), th·ª≠ tƒÉng fb_count l√™n 2 v√† ƒë·∫£m b·∫£o ngu·ªìn c·∫•p ƒë·ªß m·∫°nh
    // config.fb_location = CAMERA_FB_IN_PSRAM; // S·ª≠ d·ª•ng PSRAM n·∫øu c√≥
    // config.grab_mode = CAMERA_GRAB_LATEST;   // Ch·ªâ l·∫•y frame m·ªõi nh·∫•t

    // Kh·ªüi t·∫°o camera
    esp_err_t err = esp_camera_init(&config);
    if (err != ESP_OK) {
        Serial.printf("L·ªói kh·ªüi t·∫°o camera: 0x%x\n", err);
        return false;
    }

    // T√πy ch·ªânh th√™m cho camera (t√πy ch·ªçn)
    // sensor_t * s = esp_camera_sensor_get();
    // s->set_brightness(s, 0);     // -2 to 2
    // s->set_contrast(s, 0);       // -2 to 2
    // s->set_saturation(s, 0);     // -2 to 2
    // s->set_special_effect(s, 0); // 0 to 6 (0 - No Effect)
    // s->set_whitebal(s, 1);       // 0 = disable , 1 = enable
    // s->set_awb_gain(s, 1);       // 0 = disable , 1 = enable
    // s->set_wb_mode(s, 0);        // 0 to 4 - if awb_gain enabled (0 - Auto)
    // s->set_exposure_ctrl(s, 1);  // 0 = disable , 1 = enable
    // s->set_aec2(s, 0);           // 0 = disable , 1 = enable
    // s->set_ae_level(s, 0);       // -2 to 2
    // s->set_aec_value(s, 300);    // 0 to 1200
    // s->set_gain_ctrl(s, 1);      // 0 = disable , 1 = enable
    // s->set_agc_gain(s, 0);       // 0 to 30
    // s->set_gainceiling(s, (gainceiling_t)0); // 0 to 6
    // s->set_bpc(s, 0);            // 0 = disable , 1 = enable
    // s->set_wpc(s, 1);            // 0 = disable , 1 = enable
    // s->set_raw_gma(s, 1);        // 0 = disable , 1 = enable
    // s->set_lenc(s, 1);           // 0 = disable , 1 = enable
    // s->set_hmirror(s, 0);        // 0 = disable , 1 = enable
    // s->set_vflip(s, 0);          // 0 = disable , 1 = enable
    // s->set_dcw(s, 1);            // 0 = disable , 1 = enable
    // s->set_colorbar(s, 0);       // 0 = disable , 1 = enable

    return true;
}

/**
 * @brief Ch·ª•p ·∫£nh t·ª´ camera v√† g·ª≠i l√™n server qua HTTP POST multipart/form-data.
 */
void captureAndSend() {
    camera_fb_t * fb = NULL; // Frame buffer pointer

    // --- 1. Ch·ª•p ·∫£nh ---
    fb = esp_camera_fb_get(); // L·∫•y frame buffer t·ª´ camera
    if (!fb) {
        Serial.println("‚ùå Ch·ª•p ·∫£nh th·∫•t b·∫°i (kh√¥ng l·∫•y ƒë∆∞·ª£c frame buffer)");
        // C√≥ th·ªÉ th·ª≠ kh·ªüi t·∫°o l·∫°i camera ·ªü ƒë√¢y n·∫øu l·ªói th∆∞·ªùng xuy√™n
        // esp_camera_deinit(); initCamera();
        delay(1000); // Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i ·ªü v√≤ng l·∫∑p sau
        return;
    }
    Serial.printf("‚úÖ Ch·ª•p ·∫£nh th√†nh c√¥ng: K√≠ch th∆∞·ªõc = %zu bytes, ƒê·ªãnh d·∫°ng = %d\n", fb->len, fb->format);

    // --- 2. K·∫øt n·ªëi t·ªõi Server ---
    WiFiClient client; // T·∫°o ƒë·ªëi t∆∞·ª£ng client
    Serial.printf("ƒêang k·∫øt n·ªëi t·ªõi server %s:%d...\n", server, port);
    if (!client.connect(server, port)) {
        Serial.println("‚ùå K·∫øt n·ªëi ƒë·∫øn server th·∫•t b·∫°i.");
        esp_camera_fb_return(fb); // **Quan tr·ªçng:** Tr·∫£ l·∫°i buffer tr∆∞·ªõc khi tho√°t
        return;                   // Tho√°t kh·ªèi h√†m, ch·ªù l·∫ßn g·ª≠i sau
    }
    Serial.println("‚úÖ K·∫øt n·ªëi server th√†nh c√¥ng. ƒêang g·ª≠i ·∫£nh...");

    // --- 3. T·∫°o v√† G·ª≠i HTTP Request ---
    // T·∫°o ph·∫ßn header c·ªßa multipart
    String head = "--" + String(boundary) + "\r\n";
    // ƒê·∫∑t t√™n file ·∫£nh ƒë·ªôc nh·∫•t b·∫±ng c√°ch d√πng timestamp (millis)
    head += "Content-Disposition: form-data; name=\"image\"; filename=\"esp32_" + String(millis()) + ".jpg\"\r\n";
    head += "Content-Type: image/jpeg\r\n\r\n"; // Ki·ªÉu d·ªØ li·ªáu l√† ·∫£nh JPEG

    // T·∫°o ph·∫ßn ƒëu√¥i c·ªßa multipart
    String tail = "\r\n--" + String(boundary) + "--\r\n";

    // T√≠nh t·ªïng chi·ªÅu d√†i n·ªôi dung request
    size_t imageLen = fb->len;
    size_t totalLen = head.length() + imageLen + tail.length();

    // G·ª≠i c√°c d√≤ng header c·ªßa HTTP POST request
    client.println(String("POST ") + uploadPath + " HTTP/1.1"); // D√≤ng request POST
    client.println(String("Host: ") + server);                 // Host server
    // Ki·ªÉu n·ªôi dung l√† multipart, ch·ªâ ƒë·ªãnh boundary
    client.println("Content-Type: multipart/form-data; boundary=" + String(boundary));
    client.println("Content-Length: " + String(totalLen));     // T·ªïng chi·ªÅu d√†i n·ªôi dung
    client.println("Connection: close");                       // ƒê√≥ng k·∫øt n·ªëi sau khi xong
    client.println();                                          // D√≤ng tr·ªëng k·∫øt th√∫c ph·∫ßn header

    // G·ª≠i ph·∫ßn header c·ªßa multipart
    client.print(head);

    // G·ª≠i d·ªØ li·ªáu ·∫£nh (quan tr·ªçng: g·ª≠i tr·ª±c ti·∫øp t·ª´ buffer)
    client.write(fb->buf, imageLen);

    // G·ª≠i ph·∫ßn ƒëu√¥i c·ªßa multipart
    client.print(tail);

    // --- 4. Tr·∫£ l·∫°i Frame Buffer ---
    // **Quan tr·ªçng:** Tr·∫£ l·∫°i buffer ngay sau khi g·ª≠i xong d·ªØ li·ªáu,
    // kh√¥ng c·∫ßn ch·ªù ph·∫£n h·ªìi server ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ s·ªõm nh·∫•t c√≥ th·ªÉ.
    esp_camera_fb_return(fb);
    fb = NULL; // ƒê√°nh d·∫•u buffer ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i

    Serial.println("‚úÖ D·ªØ li·ªáu ·∫£nh ƒë√£ g·ª≠i. Ch·ªù ph·∫£n h·ªìi t·ª´ server...");

    // --- 5. ƒê·ªçc Ph·∫£n H·ªìi T·ª´ Server ---
    unsigned long timeout = millis();
    bool headerEnded = false;
    while (client.connected() || client.available()) {
        if (client.available()) {
            String line = client.readStringUntil('\n');
            line.trim(); // X√≥a kho·∫£ng tr·∫Øng th·ª´a
            // N·∫øu l√† d√≤ng tr·ªëng sau header th√¨ ƒë√°nh d·∫•u
            if (line.length() == 0 && !headerEnded) {
                 headerEnded = true;
                 Serial.println("-- H·∫øt Header Ph·∫£n H·ªìi --");
            }
            // Ch·ªâ in n·ªôi dung sau header (n·∫øu c√≥) ho·∫∑c to√†n b·ªô n·∫øu kh√¥ng quan t√¢m t√°ch b·∫°ch
             Serial.print("   << "); // K√Ω hi·ªáu d√≤ng ph·∫£n h·ªìi
             Serial.println(line);

            timeout = millis(); // Reset timeout khi c√≥ d·ªØ li·ªáu
        }
        // Ki·ªÉm tra timeout (v√≠ d·ª•: 5 gi√¢y kh√¥ng nh·∫≠n ƒë∆∞·ª£c g√¨)
        if (millis() - timeout > 5000) {
            Serial.println("‚ö†Ô∏è Timeout khi ch·ªù ph·∫£n h·ªìi t·ª´ server!");
            break;
        }
        delay(10); // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ tr√°nh CPU load cao
    }

    // --- 6. ƒê√≥ng K·∫øt N·ªëi ---
    client.stop();
    Serial.println("K·∫øt n·ªëi ƒë√£ ƒë√≥ng.");
}

// ================= END C√ÅC H√ÄM PH·ª§ TR·ª¢ =====================